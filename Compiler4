#include <stdio.h>

struct token
{
    char tok[20] ;
    int type;
    int num;
    int parent;

    struct token *next;
    struct token *prev;
};

void add(struct token *first);
void addbynumber(struct token *first);
void deletebynumber(struct token *first);
void searchbynumber(struct token *first);
void display(struct token *first);
void open(struct token *first);
void type(struct token *first);
int CheckType(char s[20]);
int IsKeyword(char s[20]);
int IsNumber(char s[20]);
int IsOperator(char s[20]);
int IsChar(char s[20]);
int IsPunct(char s[20]);
int IsIdent(char s[20]);


int main()
{
    int menu=2;
    struct token *first,*head;
    head=(struct token *)malloc(sizeof(struct token));
    first = head;
    first->next= NULL;
    first->num = 0;
    while (menu != 0)
    {

        printf("Menu: \n");
        printf("New contact --> 1\n");
        printf("Delete contact --> 2\n");
        printf("Search --> 3\n");
        printf("check type --> 4\n");
        printf("Open --> 5\n");
        printf("display --> 6\n");
        printf("Exit --> 0\n");

        scanf("%d",&menu);

        switch (menu)
        {
            case 1:
                printf("append to the end of list --> 11 \n");
                printf("after a number --> 12 \n");
                //printf("before a number --> 13 \n");
                scanf("%d",&menu);

                if (menu==11)
                    add(first);
                else if (menu==12)
                    addbynumber(first);

                break;
            case 2:
                printf("delete by number--> 22 \n");
                scanf("%d",&menu);

                if (menu==22)
                    deletebynumber(first);
                break;

            case 3:
                printf("search by number--> 32 \n");
                scanf("%d",&menu);

                if (menu==32)
                    searchbynumber(first);

                break;

            case 4:
                type(first->next);
                break;
            case 5:
                open(first);
                break;
            case 0:
                menu=0;
                break;
            case 6:
                display(first);
                break;
            default:
            break;
        }
    }
	return 0;

}

void add(struct token *first)
{
    struct token *current,*newtoken;
    int numtemp;
    newtoken = (struct token *)malloc(sizeof(struct token));
    newtoken->next = NULL;

    current=first;

    while(current->next != NULL)
    {
        current = current->next;
    }
    numtemp = current->num + 1;
    current->next = newtoken;
    newtoken->num = numtemp;

    printf("Enter name of new contact: \n");
    scanf("%s",newtoken->tok);

    printf("Enter number of new contact: \n");
    scanf("%d",&newtoken->type);


    return;
}

void addbynumber(struct token *first)
{
    int flag=0,a,numtemp;

    struct token *current,*newtoken,*temp;
    newtoken = (struct token *)malloc(sizeof(struct token));

    current=first;

    printf("Enter number to add new contact after it: \n");
    scanf("%d",&a);

    while((current != NULL) && (flag==0))
    {
        if(current->num == a )
        {
            flag=1;
            temp=current->next;
            newtoken->next=temp;
            numtemp = current->num + 1;
            current->next = newtoken;
            newtoken->num = numtemp;

            printf("Enter name of new contact: \n");
            scanf("%s",newtoken->tok);

            printf("Enter number of new contact: \n");
            scanf("%d",&newtoken->type);


        }
            current = current->next;
    }

    current=first;

    while(current->next != NULL)
        {
            numtemp = current->num + 1;
            current = current->next;
            current->num = numtemp;
        }



    if (flag==0)
        printf("Error: %d Not found \n",a);

    return;
}

void deletebynumber(struct token *first)
{
    int flag,a=0,numtemp;

    struct token *current,*previous;

    current=first;

    printf("Enter number you want to delete: \n");
    scanf("%d",&a);


    while((current != NULL) && (flag==0))
    {
        if (current->num == a)
        {
            previous->next = current->next;
            flag=1;
        }

        previous = current;
        current = current->next;

    }


/*
    current=first;

    while(current->next != NULL)
        {
            numtemp = current->num + 1;
            current = current->next;
            current->num = numtemp;
        }
*/

    if (flag==0)
        printf("Error: %d Not found \n",a);

    return;
}

void searchbynumber(struct token *first)
{
    int flag;
    int a;

    struct token *current,*found;
    current=first;

    printf("Enter number you want to search: \n");
    scanf("%d",&a);

    while((current != NULL) && (flag==0))
    {
        if (current->num == a)
        {
            found= current;
            flag=1;
        }

        current = current->next;
    }

    if (flag==0)
        printf("Error: %d Not found \n",a);

    return;
}


void display(struct token *first)
{
    struct token *current;
    int numtemp;

    current=first;

    while(current->next != NULL)
        {
            numtemp = current->num + 1;
            current = current->next;
            current->num = numtemp;
        }


    current=first;

    while(current != NULL)
    {
        printf("%d    %s      %d\n",current->num,current->tok,current->type);
        current = current->next;

    }

    return;
}

void open(struct token *first)
{
    FILE *fop;
    fop = fopen("open.txt","r+");

    int flag=1;

    while (!feof(fop))
    {

    struct token *current,*newtoken;
    newtoken = (struct token *)malloc(sizeof(struct token));
    newtoken->next= NULL;

    current=first;

    while(current->next != NULL)
    {
        current = current->next;
    }

    current->next = newtoken;

    fscanf(fop,"%s\n",&newtoken->tok);

    }

    fclose(fop);
    return;
}


void type(struct token *first)
{


    struct token *current;
    current=first;


    while(current != NULL)
    {
		current->type = CheckType(current->tok);

        current = current->next;
    }

    return;
}

int CheckType(char s[20]){

	if(IsKeyword(s)==1){
		return 1;
	}
	else if(IsNumber(s)==2){
		return 2;
	}
	else if(IsOperator(s)==3){
		return 3;
	}
	else if(IsPunct(s)==4){
		return 4;
	}
	else if(IsChar(s)==5){
		return 5;
	}
	else if(IsIdent(s)==6){
		return 6;
	}
	else{
		return 7;
	}

}

int IsKeyword(char s[20]){
	int n;

	if(strncmp(s,"main",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"if",2)==0 && s[4]=='\0'){
		return 1;
	}
	else if(strncmp(s,"else",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"while",5)==0 && s[7]=='\0'){
		return 1;
	}
	else if(strncmp(s,"bool",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"false",5)==0 && s[7]=='\0'){
		return 1;
	}
	else if(strncmp(s,"true",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"int",3)==0 && s[5]=='\0'){
		return 1;
	}
	else if(strncmp(s,"float",5)==0 && s[7]=='\0'){
		return 1;
	}
	else if(strncmp(s,"char",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"void",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"null",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"return",6)==0){
		return 1;
	}
	else{
		return 0;
	}
}

int IsNumber(char s[20]){
	int i,j,k,a=1,b=1,n,flag=0;
	n=strlen(s);
	
	for(i=1;i<n-1;i++){
		if(s[i]=='.'){
			for(j=1;j<i-1;j++){
				if(isdigit(s[j])==0){
					a=2;
				}
			}
			for(k=i+1;k<n-1;k++){
				if(isdigit(s[k])==0){
					b=2;
				}
			}
			if(a==1 && b==1){
				return 2;
			}
		}
	}
	
	for(i=0;(i<n) && (flag==0);i++){
		if(isdigit(s[i])==0){
			flag=1;
		}
	}
	if (flag==0)
	{
		return 2;
	}
}

int IsOperator(char s[20]){
	int n;
	n=strlen(s);

	if(strcmp(s,"+")==0 || strcmp(s,"-")==0 || strcmp(s,"*")==0 || strcmp(s,"/")==0 || strcmp(s,"<")==0 || strcmp(s,">")==0 || strcmp(s,"=")==0 || strcmp(s,"==")==0 || strcmp(s,"!=")==0 || strcmp(s,"&&")==0 || strcmp(s,"||")==0){
		return 3;
	}
}

int IsPunct(char s[20]){

	if(s[0]=='(' || s[0]==')' || s[0]=='{' || s[0]=='}' || s[0]==';' || s[0]==','){
		if(s[1]=='\0'){
			return 4;
		}
		
	}
}

int IsChar(char s[20]){
	int n;
	n=strlen(s);

	if(s[0]=='\'' && s[2]=='\''){
		return 5;
	}
}

int IsIdent(char s[20]){
	int n,i;
	n=strlen(s);

	if(isupper(s[0])==0 && islower(s[0])==0){
		return 100;
	}

	for(i=1;i<=n;i++){
		if(ispunct(s[i])!=0){
			return 100;
		}
	}

	return 6;
}
